
LeetCode :
Problem 9 :
Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.
Example 1:
Input: 121
Output: true
Example 2:
Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:
Input: 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
Follow up:
Coud you solve it without converting the integer to a string?

Cevap :
 /**
 * @param {number} x
 * @return {boolean}
 */
var isPalindrome = function(x) {
    if x<0 || (x%10 == 0 & x!= 0)
    return false;
    
    int revertedNumber = 0;
    while (x>revertedNumber) {
            revertedNumber = revertedNumber * 10 + x % 10;
            x /= 10;
        }
};

Problem 19 : 
Given a linked list, remove the n-th node from the end of list and return its head.
Example:
Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Follow up:
Could you do this in one pass?
Cevap : 
public ListNode removeNthFromEnd(ListNode head, int n) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    int length  = 0;
    ListNode first = head;
    while (first != null) {
        length++;
        first = first.next;
    }
    length -= n;
    first = dummy;
    while (length > 0) {
        length--;
        first = first.next;
    }
    first.next = first.next.next;
    return dummy.next;
}

Problem 39 :
Given an array of strings, group anagrams together.
Example:
Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
Output:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:
•	All inputs will be in lowercase.
•	The order of your output does not matter.

Cevap : 
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if (strs.length == 0) return new ArrayList();
        Map<String, List> ans = new HashMap<String, List>();
        for (String s : strs) {s
            char[] ca = s.toCharArray();
            Arrays.sort(ca);
            String key = String.valueOf(ca);
            if (!ans.containsKey(key)) ans.put(key, new ArrayList());
            ans.get(key).add(s);
        }
        return new ArrayList(ans.values());
    }
}

Problem 59:
Input: 3
Output:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]

Cevap : 
class Solution:
	    def generateMatrix(self, n):
	        """
	        :type n: int
	        :rtype: List[List[int]]
	        """

	        result = [[0] * n for i in range(n)]
	        x = y = 0
	        left = top = 0
	        right = bottom = n - 1
	        current = 1
	

	        while current <= n * n:
	            # go right
	            for i in range(left, right + 1):
	                result[top][i] = current
	                current += 1
	            top += 1
	

	            # go down
	            for i in range(top, bottom + 1):
	                result[i][right] = current
	                current += 1
	            right -= 1
	

	            # go left
	            for i in range(right, left - 1, -1):
	                result[bottom][i] = current
	                current += 1
	            bottom -= 1
	

	            # go top
	            for i in range(bottom, top - 1, -1):
	                result[i][left] = current
	                current += 1
	            left += 1
	

	        return result


Problem 189:
Given an array, rotate the array to the right by k steps, where k is non-negative.
Follow up:
•	Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
•	Could you do it in-place with O(1) extra space?
 
Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 
Constraints:
•	1 <= nums.length <= 2 * 10^4
•	It's guaranteed that nums[i] fits in a 32 bit-signed integer.
•	k >= 0

Cevap : 

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        public class RotateArray {

	public void rotate(int[] nums, int k) {
		//bounds check
		if (nums == null || nums.length == 0 || k == 0) {
			return;
		}
		int n = nums.length;
		//k may be larger than n
		k = k % n;
		rotateRange(0, n - k - 1, nums);
		rotateRange(n - k, n - 1, nums);
		rotateRange(0, n - 1, nums);
	}
	
	private void rotateRange(int start, int end, int[] array) {
		for (int i = start, j = end; i < j; i++, j--) {
			swap(array, i, j);
		}
	}
	private void swap(int[] array, int i, int j) {
		int t = array[i];
		array[i] = array[j];
		array[j] = t;
	}
	
}
    }
};





