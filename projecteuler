Project Euler Cevapları : 
Problem 19
You are given the following information, but you may prefer to do some research for yourself.
•	1 Jan 1900 was a Monday.
•	Thirty days has September,
April, June and November.
All the rest have thirty-one,
Saving February alone,
Which has twenty-eight, rain or shine.
And on leap years, twenty-nine.
•	A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
Cevap :
 var a = 1;
var b = 2;
var c = Math.sqrt(a*a + b*b);
var sum = a+b+c;
while(sum != 1000){
    if(sum > 1000){
        a++;
        b = a+1;
    } else {
        b++;
    }
    c = Math.sqrt(a*a + b*b);
    sum = a + b + c;
}

console.log('a:' + a + '  b:' + b + '  c:' + c);
console.log(a*b*c);

Problem 19 :
You are given the following information, but you may prefer to do some research for yourself.
•	1 Jan 1900 was a Monday.
•	Thirty days has September,
April, June and November.
All the rest have thirty-one,
Saving February alone,
Which has twenty-eight, rain or shine.
And on leap years, twenty-nine.
•	A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
Cevap :
var strResult = '<br />The # of Sundays that were the 1st are: ';
var daysInMonth = [0,31,0,31,30,31,30,31,31,30,31,30,31];
function daysInFeb(year) {
    if (year % 4 != 0) return 28;
    if (year % 100 == 0 && year % 400 != 0) return 28;
    return 29;
}
//we are going to calc by days - since Jan 1, 1900 is 1, then every divisble 7 is a Sunday, and if we take
//1 and add 31, that would be feb 1st, and add 28 to that and that would be Mar 1, and so on...
function calcSundays() {
    var Day = 1;
    var totSunday = 0;
    for (var month = 0; ++month < 13;) {
        //we are doing 1900 first, since there are no checks for Sundays (1901+)
        Day += (month == 2) ? daysInFeb(1900) : daysInMonth[month];
    }
    for (var year = 1900; ++year < 2001;) {    //at this point we are at Jan 1, 1901
        for (month = 0; ++month < 13;) {
            if (Day % 7 == 0) totSunday++;
            Day += (month == 2) ? daysInFeb(year) : daysInMonth[month];
        }
    }
    return totSunday;
}

strResult += calcSundays();        
    
$('#main').html(strResult);

Problem 39 : 
If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.
{20,48,52}, {24,45,51}, {30,40,50}
For which value of p ≤ 1000, is the number of solutions maximised?
Cevap : 

var perimeterCombinationCounts = [];

for(a = 1; a < 999; a++){
    for(b = a; b < (999-a); b++){
        var c = Math.sqrt(a*a + b*b);
        if(c%1 == 0){
            var perimeter = a + b + c;
            if(perimeter <= 1000){
                perimeterCombinationCounts[perimeter] = (perimeterCombinationCounts[perimeter] || 0) + 1;
            }
        }
    }
}

var maxCombinations = 0;
var maxCombinationsPerimeter = 0;

for(var perimeter = 0; perimeter <= 1000; perimeter++){
    var combinations = perimeterCombinationCounts[perimeter];
    if(combinations && combinations > maxCombinations){
        console.log('perimeter: ' + perimeter + '  combinations: ' + combinations);
        maxCombinations = combinations;
        maxCombinationsPerimeter = perimeter;
    }        
}
        
console.log(maxCombinationsPerimeter);

Problem 49
The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.
There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.
What 12-digit number do you form by concatenating the three terms in this sequence?
Cevap : 
import java.util.Arrays;
	

	
	public final class p049 implements EulerSolution {
		
	public static void main(String[] args) {
			System.out.println(new p049().run());
		}
		
		
		private static final int LIMIT = 10000;
		
		public String run() {
			boolean[] isPrime = Library.listPrimality(LIMIT - 1);
			for (int base = 1000; base < LIMIT; base++) {
				if (isPrime[base]) {
					for (int step = 1; step < LIMIT; step++) {
						int a = base + step;
						int b = a    + step;
						if (       a < LIMIT && isPrime[a] && hasSameDigits(a, base)
						        && b < LIMIT && isPrime[b] && hasSameDigits(b, base)
						        && (base != 1487 || a != 4817))
							return "" + base + a + b;
					}
				}
			}
			throw new RuntimeException("Not found");
		}
		
		
		private static boolean hasSameDigits(int x, int y) {
			char[] xdigits = Integer.toString(x).toCharArray();
			char[] ydigits = Integer.toString(y).toCharArray();
			Arrays.sort(xdigits);
			Arrays.sort(ydigits);
			return Arrays.equals(xdigits, ydigits);
		}
		
	}

Problem 79
A common security method used for online banking is to ask the user for three random characters from a passcode. For example, if the passcode was 531278, they may ask for the 2nd, 3rd, and 5th characters; the expected reply would be: 317.
The text file, keylog.txt, contains fifty successful login attempts.
Given that the three characters are always asked for in order, analyse the file so as to determine the shortest possible secret passcode of unknown length.
Cevap : 

public final class p079 implements EulerSolution {
		
		public static void main(String[] args) {
			System.out.println(new p079().run());
		}
		
		
		private static String[] SUBSEQS = {"319", "680", "180", "690", "129", "620", "762", "689", "762", "318", "368", "710", "720", "710", "629", "168", "160", "689", "716", "731", "736", "729", "316", "729", "729", "710", "769", "290", "719", "680", "318", "389", "162", "289", "162", "718", "729", "319", "790", "680", "890", "362", "319", "760", "316", "729", "380", "319", "728", "716"};
		
		private char[] packedSubseqs;
		
		
		public String run() {
			// Preprocessing
			packedSubseqs = new char[SUBSEQS.length * 3];
			for (int i = 0; i < packedSubseqs.length; i++)
				packedSubseqs[i] = SUBSEQS[i / 3].charAt(i % 3);
			
			// Try ascending lengths
			for (int len = 3; len <= 10; len++) {
				int end = Library.pow(10, len);
				for (int guess = 0; guess < end; guess++) {
					char[] guessChars = toChars(guess, len);
					if (isConsistent(guessChars))
						return new String(guessChars);
				}
			}
			throw new RuntimeException("Not found");
		}
		
		
		private boolean isConsistent(char[] guess) {
			// For each string 's' in SUBSEQS, test if 's' is a subsequence of 'guess'
			for (int i = 0; i < packedSubseqs.length; i += 3) {
				int j = 0;  // Index in 's'
				for (int k = 0; k < guess.length && j < 3; k++) {  // Index in 'guess'
					if (guess[k] == packedSubseqs[i + j])
						j++;
				}
				if (j < 3)  // Not all characters consumed, fail
					return false;
			}
			return true;
		}
		
		
		// Converts integer to string with zero padding, in little endian.
		// Since we're trying all combinations, the order doesn't matter.
		private static char[] toChars(int n, int len) {
			char[] result = new char[len];
			int i = 0;
			for (; i < result.length; i++, n /= 10)
				result[i] = (char)('0' + (n % 10));
			if (n != 0)
				throw new IllegalArgumentException();
			for (; i < result.length; i++)
				result[i] = '0';
			return result;
		}
		
	}


